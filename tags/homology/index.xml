<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homology on DL Ferrario&#39;s Test Web Page</title>
    <link>//www.dlfer.xyz/tags/homology/</link>
    <description>Recent content in Homology on DL Ferrario&#39;s Test Web Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright &amp;copy; 2016 - 3016, DL Ferrario</copyright>
    <lastBuildDate>Thu, 27 Oct 2016 11:45:52 +0200</lastBuildDate>
    
	<atom:link href="//www.dlfer.xyz/tags/homology/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Computing the Smith Normal Form of a matrix, and homology groups?</title>
      <link>//www.dlfer.xyz/post/2016-10-27-smith-normal-form/</link>
      <pubDate>Thu, 27 Oct 2016 11:45:52 +0200</pubDate>
      
      <guid>//www.dlfer.xyz/post/2016-10-27-smith-normal-form/</guid>
      <description>A simple algorithm for computing the Smith Normal Form of a matrix in $\ZZ$ The proof and the algorithm are the same.
First, a few auxiliary functions. Given a matrix $M$, the follow two functions are self-explanatory.
def dims(M): num_righe=len(M) num_colonne=len(M[0]) return (num_righe,num_colonne) def MinAij(M,s): num_righe, num_colonne=dims(M) ijmin=[s,s] valmin=max( max([abs(x) for x in M[j][s:]]) for j in range(s,num_righe) ) for i in (range(s,num_righe)): for j in (range(s,num_colonne)): if (M[i][j] !</description>
    </item>
    
  </channel>
</rss>