<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DL Ferrario&#39;s Test Web Page </title>
    <link>http://blog.dlfer.xyz/topics/topology/</link>
    <language>en-us</language>
    <author></author>
    <rights>(C) 2016</rights>
    <updated>2016-11-04 13:08:54 &#43;0100 CET</updated>

    
      
        <item>
          <title>Graphs, trees and simplicial complexes</title>
          <link>http://blog.dlfer.xyz/post/2016-11-04-graphs/</link>
          <pubDate>Fri, 04 Nov 2016 13:08:54 CET</pubDate>
          <author></author>
          <guid>http://blog.dlfer.xyz/post/2016-11-04-graphs/</guid>
          <description>

&lt;h2 id=&#34;graphs-and-simplicial-complexes&#34;&gt;Graphs and simplicial complexes&lt;/h2&gt;

&lt;p&gt;A one-dimensional simplicial complex is a &lt;em&gt;graph&lt;/em&gt;.
That is, $K=(X_ K,\Phi_ K)$ where $V(K) = X_ K$ is the set of vertices
and $\Phi_ K$ is the set of  simplexes,
with $\Phi_ K = \Phi^1_ K \cup \Phi^0_ K$, where
$E(K) = \Phi^1_ K$ are the 1-dimensional simplexes (termed &lt;em&gt;edges&lt;/em&gt; of $K$)
and $\Phi^0_ K = \{ \{P\} : P \in X_ K \}$ are the $0$-dimensional simplexes (sometimes
termed again &lt;em&gt;vertices&lt;/em&gt; of $K$).&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;subgraph&lt;/em&gt; $X \subset K$ is a graph with as vertices
a subset of vertices of $K$, and as edges
a subset of the edges of $K$.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;path&lt;/em&gt; (walk?) in $K$ of length $l$ form a vertex $P_ 0\in X_ K$
to a vertex $P_ l \in X_ K$ is a sequence $P_ 0, \ldots, P_ l$
of $l+1$ vertices such such that for each $j=0,\ldots, l-1$
$$
\{ P_ j, P_ {j+1} \} \in \Phi^1_ K.
$$
If the vertices $P_ 0, \ldots, P_ {l}$ are all &lt;strong&gt;distinct&lt;/strong&gt; (except possibly $P_ 0 = P_ l$), then the path
is a &lt;em&gt;simple path&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remark&lt;/strong&gt;: This terminology is not uniform in the literature. For many authors, paths
in graph theory are what here we call simple paths.
Note that if $x,y$ are vertices and there exists a path
from $x$ to $y$ of length $l$, then
there exists a simple path from $x$ to $y$ of length $\leq l$.
In fact, assume that there is a path $x=P_ 0, \ldots, P_ l=y$.
If it is not simple, then there exists indices $i,j$
such that $i &amp;lt; j$ and $P_ i = P_ j$. Hence there is a path
$x=P_ 0, \ldots, P_ {i-1}, P_ i=P_ j, P_ {j+1}, \ldots , P_ k =y$
skipping all indices between $i$ and $j$, with length $&amp;lt;l$.
By a finite number of iterations, the path will have no multiple vertices
except the endpoints $x$ and $y$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; $K$ is &lt;em&gt;connected&lt;/em&gt; if there is a path between any two  of its vertices.&lt;/p&gt;

&lt;p&gt;Let $\partial_ 1\from C_ 1(K) \to C_ 0 (K)$ be the unique non-trivial boundary homomorphism
in the simplicial chain complex of $K$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; $K$ is &lt;em&gt;acyclic&lt;/em&gt; if $\partial_ 1\from C_ 1(K) \to C_ 0(K)$
has trivial kernel $Z_ 1(K) = \ker \partial_ 1 = 0$.&lt;/p&gt;

&lt;p&gt;In graph theory, a &lt;em&gt;cycle&lt;/em&gt; in $K$ is a subgraph of $K$ where each vertex belongs to exactly two
(neighbouring) edges. If it not difficult to see that if there is such a cycle,
then it represents a non-zero algebraic cycle in $C_ 1(K)$, and hence
$Z_ 1(K) \neq 0$. We sometimes use the terms &lt;em&gt;geometric cycle&lt;/em&gt; (the subgraph)
and &lt;em&gt;algebraic cycle&lt;/em&gt; (the element of $Z_ 1(K)$).&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(1)&lt;/dt&gt;
&lt;dd&gt;A graph $K$ is acyclic $Z_ 1(K) = 0$ if and only if it does not contain a geometric cycle, i.e. a
&lt;strong&gt;subgraph&lt;/strong&gt; where each vertex belongs to exactly
two edges.&lt;br /&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;Proof:&lt;/em&gt;
Since a geometric non-trivial cycle is an algebraic cycle,
if  $Z_ 1(K) = 0 $ then there cannot be grometric cycles, and
the &amp;quot;only if&amp;quot; part is proven.
For the &amp;quot;if&amp;quot; part: assume $z\in Z_ 1(K)$ is such that
$$
z = \sum_ {j=1}^l \alpha_ j[P_ j,P_ {j+1}], \quad \forall j, \alpha_ j \neq 0
$$
Let $S$ denote the set of all the $l$ edges ($1$-simplices) appearing in the sum of $z$.
The vertices $P_ 1,\ldots, P_ {l+1}$ need not be distinct. Let $X$ be the subgraph
with as vertices the  set
of vertices of the edges in $S$,
and as edges the elements of $S$.
Note that each vertex in $X$ belongs to at least two edges: if
on the contrary there exists $j$ (or $j+1$) such that $[P_ j,P_ {j+1}]$
is the only edge in $S$ containing $P_ j$ (or $P_ {j+1}$),
then in the sum $\partial_ 1(z)$ the term $P_ j$ (or  $P_ {j+1}$)
has as coefficient $\pm \alpha_ j \neq 0$, which is not possible
since $\partial_ 1(z) = 0$.&lt;/p&gt;

&lt;p&gt;Now, take $[P_ 1,P_ 2]$. There exists an edge $\sigma \in S$ such that $P_ 2 \in \sigma$ and $\sigma \neq [P_ 1,P_ 2]$, and let (permuting indices
if necessary) assume $\sigma = [P_ 2, P_ 3]$.
Now, if $P_ 3 = P_ 1$, then $P_ 1, P_ 2, P_ 3$ together with the three consecutive edges
is a geometric cycle, and we finish.
Otherwise, $P_ 3 \not\in \{ P_ 1, P_ 2\}$ (i.e. the three vertices are distinct),
and there exists (up to permuting indices if necessary)
$P_ 4\not\in \{ P_ 2, P_ 3 \}$ such that $[P_ 3, P_ 4] \in S$.
Either $P_ 4 \in \{ P_ 1\}$ or not.
If yes, then there is the  geometric cycle
$P_ 1, P_ 2, P_ 3, P_ 4$
(with proper edges).
If not, then $P_ 1, P_ 2, P_ 3, P_ 4$ are all distinct;
furthermore
there is $P_ 5 \not\in \{ P_ 3, P_ 4 \} $ such that $[P_ 4, P_ 5]\in S$.
If $P_ 5 \in \{P_ 1, P_ 2\}$, then we obtained  a cycle
$P_ 1P_ 2 P_ 3 P_ 4 P_ 5$ (or
$P_ 2 P_ 3 P_ 4 P_ 5$.
If not, then $P_ 1, \ldots, P_ 5$ are all distinct.&lt;/p&gt;

&lt;p&gt;We proceed in this way, and either we stop with a geometric cycle, or we obtain a sequence  of distinct vertices
$P_ 1, \ldots, P_ n$ such that $[P_ j, P_ {j+1}] \in S$ for each $j$.
Since $S$ is finite, the iteration has to stop at most in $l$ steps.
&lt;em&gt;(/Proof)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;trees&#34;&gt;Trees&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; A &lt;em&gt;tree&lt;/em&gt; $T$ is a connected acyclic graph.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(2)&lt;/dt&gt;
&lt;dd&gt;A connected graph $K$ is acyclic if and only if any two vertices can be connected by a unique simple path.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;Proof:&lt;/em&gt;
First, assume that $K$ is connected and $x$, $y$ are two vertices of $K$.
Since $K$ is connected, there is a simple path
from $x$ to $y$.
If there are two distinct simple paths
from $x$ to $y$,
$$
x=P_ 0, \ldots, P_ l = y, \quad
x=Q_ 0, \ldots, Q_ k = y,
$$
then $$ z = \sum_ {j=0}^{l-1} [P_ j,P_ {j+1} ] - \sum_ {i=0}^{k-1} [Q_ i, Q_ {i+1}] \neq 0
$$
but
$\partial_ 1 z = -x + y + x - y = 0$,
hence $z \in Z_ 1(K) \neq 0 $.
Therefore $K$ is not acyclic.&lt;/p&gt;

&lt;p&gt;On the other hand, if $K$ is not acyclic, there exists a geometric cycle in $K$, and two vertices
joined by two distinct simple paths.
&lt;em&gt;(/Proof)&lt;/em&gt;&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(3)&lt;/dt&gt;
&lt;dd&gt;A connected graph $K$ contains as subgraph a tree $T$ having as vertices the same set of vertices of $K$ (a &lt;em&gt;spanning tree&lt;/em&gt;).
It is maximal in the family of all subgraphs of $K$ wich are trees.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;Proof:&lt;/em&gt;
Let $X$ be the set of all subgraphs of $K$ which are trees, ordered by inclusion.
Such a set of subgraphs is finite and partially ordered, and hence it has maximal elements.&lt;br /&gt;
Let us show that a tree $T\subset K$ is maximal in $X$ if and only if it is a spanning tree,
i.e. if and only if its vertices are the same as the vertices of $K$.&lt;/p&gt;

&lt;p&gt;If the set of vertices of $T$ coincides with the set of vertices of $K$,
and $T&#39; \subset K$ is another tree such that $T\subset T&#39;$, $T \neq   T&#39;$,
then there exists an edge $[P,Q] \subset T&#39;$ such that
$[P,Q] \not\subset T$. But there is a (unique) simple  path
from $P$ to $Q$, which yield a cycle in $T&#39;$ together with the edge $[P,Q]$:
this is impossible since $T&#39;$ is a tree and hence acyclic.&lt;/p&gt;

&lt;p&gt;On the other hand,
if the set of vertices of $T$ does not coincide with the set of vertices of $K$,
then there exists $Q$ vertex of $K$ such that $Q \not \in T$.
Take $P \in T$, and $P=P_ 0, \ldots, P_ l = Q$ a simple path
in $K$ (which is connected). Let $j$ be the minimum value of the index
such that $P_ j \in K$ but $P_ {j+1} \not\in K$.
The edge $\sigma = [P_ j, P_ {j+1}]$ is not contained in $T$,
hence the subgraph $T&#39; = T \cup [P_ j, P_ {j+1}]$
is not equal to $T$.&lt;br /&gt;
Now, if $X\subset T&#39;$ is a geometric cycle,
then it cannot contain $[P_ j, P_ {j+1}]$ (since the only edge of $T&#39;$
containing $P_ {j+1}$ is $\sigma$), and therefore
$X \subset T$.
But $T$ is a tree, and hence it does not have cycles.
Thus, $T&#39;$ is acyclic. It is easy to show that $T&#39;$ is connected,
and hence that it is a tree, and that $T$ is not maximal.
&lt;em&gt;(/Proof)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;homology-of-a-graph&#34;&gt;Homology of a graph&lt;/h2&gt;

&lt;dl&gt;
&lt;dt&gt;(4)&lt;/dt&gt;
&lt;dd&gt;The homology groups of a &lt;strong&gt;connected&lt;/strong&gt; graph $K$ are:
$$
H_ 0(K) = \ZZ, \quad
H_ 1(K) = \ZZ^{h_ 1}
$$
where $h_ 1 =c_ 1 - c_ 0+1$,
with $c_ 0$ is the number of vertices of $K$,
$c_ 1$ is the number of edges of $K$.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;Proof:&lt;/em&gt;
Let $T\subset K$ be a spanning tree, with -say- $l+1$ vertices.
By definition, $Z_ 1(T) = 0$.
Let $R$ be a vertex of $T$.
It is possible to define an ascending chain of trees
$\{R\} = T_ 0 \subset  T_ 1 \subset \ldots \subset T_ l = T$,
such that the $j$-th tree $T_ j$ has $j+1$ vertices.
Let $P_ j$ denote the vertex of $T_ j $ which is not in $T_ {j-1}$ (if $j=0$,
$P_ 0 =R$). Such a vertex, for $j&amp;gt;0$, belongs to a unique edge in $T_ j$:
let $P_ j&#39;$ be the other vertex of such a simplex.
Hence $T_ j$ has $j+1$ vertices and $j$ edges, and therefore
$T$ has $c_ 0$ vertices (the same as $K$), and $c_ 0-1$ edges (after $R$,
$T$ is obtained by adding iteratively $l$ edges). Let $Y$ denote the set of edges
of $K$ which are &lt;strong&gt;not&lt;/strong&gt; in $T$: it has $r= c_ 1 - (c_ 0 - 1)= c_ 1 - c_ 0 + 1$ elements.
Let $\pi \from C_ 1(K) \to \ZZ[Y]\cong \ZZ^r $
denote the projection, defined as
$$
\pi(\sigma) =
\begin{cases}
\sigma &amp;amp; \text{if $\sigma \in Y$} \\&lt;br /&gt;
0 &amp;amp; \text{otherwise}
\end{cases}
$$
Then $\ker \pi \cap Z_ 1 (K) = 0$:  in fact, if $z \in \ker \pi \cap Z_ 1 (K) = 0$,
then
as $\pi (z) = 0$, the support of $z$ is in $T$. Hence $z\in Z_ 1(T) = 0$,
and therefore $z=0$.
Therefore, the restriction of $\pi$ to $Z_ 1(K)$ is a monomorphism
$Z_1 (K) \to \ZZ[Y]$.&lt;/p&gt;

&lt;p&gt;It is also onto: for any edge $\sigma =[x,y]\in Y$,
its vertices $x,y$ belong to $T$. There is a unique simple path in $T$
from $x$ to $y$, say $x=P_ 0, \ldots P_ k = y$.
Then
$$
z = [y,x] + \sum_ {j=0}^{k-1} [P_ j, P_ {j+1}] \in Z_ 1(K),
\text{ and }
\pi(z) = [y,x] = -\sigma.
$$
Thus $H_ 1(K) = Z_ 1(K) = \ZZ^{r}$.&lt;/p&gt;

&lt;p&gt;The $0$-dimensional homology of any connected graph is $\ZZ$: consider the augmentation homomorphism
$\varepsilon \from C_ 0(K) \to \ZZ$,
defined as $\varepsilon [P] = 1$ for each vertex $P$.
Fix a vertex $R$ of $K$
For each $j=1, \ldots, c_ 0$,
let $P_ j$ denote the $j$-th vertex in $K$,
and
let $P_ i^j$ (as $i=0,\ldots, l_ j$)
denote the simple path such that $P_ 0^j = R$,
and $P_ {l_ j}=P_ j$
Then,
for each $j$
$$
\partial_ 1 \left(
[P_ 0^j,P_ 1^j] +
\ldots
[P_ {l_ j-1}^j,P_ {l_ j}^j]
\right) = [P_ {l_ j}^j] - [ P_ 0^j ] = [P_ j] - [R ].
$$
Let $p_ j$ denote the sum
$$p_ j = [P_ 0^j,P_ 1^j] + \ldots [P_ {l_ j-1}^j,P_ {l_ j}^j].$$&lt;/p&gt;

&lt;p&gt;Hence
if $z = \sum_ {j=1}^ {c_ 0} \alpha_ j [P_ j] \in \ker \varepsilon$,
$$ z = \sum_ {j=1}^ {c_ 0} \alpha_ j ([P_ j] - [R]) =
= \sum_ {j=1}^ {c_ 0} \alpha_ j (\partial_ 1 p_ j)  \in B_ 0(K)
$$
is a boundary. Therefore $B_ 0(K) = \ker \epsilon$, and
$H_ 0(K) = \ZZ$.
&lt;em&gt;(/Proof)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;$\newcommand{\rk}{\operatorname{rank}}$&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remark:&lt;/strong&gt;
Given a short exact sequence of abelian groups $0\to A \to B \to C \to 0$,
one has $\rk B = \rk A + \rk C$.
Now, consider the two exact sequences
$$
0 \to B_ j \to Z_ j \to  H_ j \to 0
\implies
\rk Z_ j = \rk B_ j + \rk H_ j
$$
$$
0 \to Z_ {j} \to C_  j \to B_ {j-1} \to 0
\implies
\rk C_ j = \rk Z_ j + \rk B_ {j-1},
$$
which implies
$$\begin{aligned}
\sum_ {j} (-1)^j \rk C_ j &amp;amp; =
\sum_ {j} (-1)^j ( \rk Z_ j + \rk B_ {j-1}) = \\&lt;br /&gt;
&amp;amp;= \sum_ {j} (-1)^j \left( \left( \rk B_ j + \rk H_ j \right) + \rk B_ {j-1} \right) = \\&lt;br /&gt;
&amp;amp;=
\sum_ {j} (-1)^j \rk B_ j  +
\sum_ {j} (-1)^{j+1} \rk B_ j +
\sum_ {j} (-1)^j \rk H_ j  \\&lt;br /&gt;
&amp;amp;=
\sum_ {j} (-1)^j \rk H_ j
\end{aligned}
$$
which in our context is $c_ 0 - c_ 1 = h_ 0 - h_ 1$.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Computing the Smith Normal Form of a matrix, and homology groups?</title>
          <link>http://blog.dlfer.xyz/post/2016-10-27-smith-normal-form/</link>
          <pubDate>Thu, 27 Oct 2016 11:45:52 CEST</pubDate>
          <author></author>
          <guid>http://blog.dlfer.xyz/post/2016-10-27-smith-normal-form/</guid>
          <description>

&lt;h2 id=&#34;a-simple-algorithm-for-computing-the-smith-normal-form-of-a-matrix-in-zz&#34;&gt;A simple algorithm for computing the Smith Normal Form of a matrix in $\ZZ$&lt;/h2&gt;

&lt;p&gt;The proof and the algorithm are the same.&lt;/p&gt;

&lt;p&gt;First, a few auxiliary functions. Given a matrix $M$, the follow two functions are
self-explanatory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def dims(M):
 num_righe=len(M)
 num_colonne=len(M[0])
 return (num_righe,num_colonne)

def MinAij(M,s):
 num_righe, num_colonne=dims(M)
 ijmin=[s,s]
 valmin=max( max([abs(x) for x in M[j][s:]]) for j in range(s,num_righe) )
 for i in (range(s,num_righe)):
  for j in (range(s,num_colonne)):
   if (M[i][j] != 0 ) and (abs(M[i][j]) &amp;lt;= valmin) :
    ijmin = [i,j]
    valmin = abs(M[i][j])
 return ijmin

def IdentityMatrix(n):
 res=[[0 for j in range(n)] for i in range(n)]
 for i in range(n):
  res[i][i] = 1
 return res

def display(M):
 r=&amp;quot;&amp;quot;
 for x in M:
  r += &amp;quot;%s\n&amp;quot; % x
 return r +&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, one needs the elementary operations on rows and columns on the matrix $M$:
swap (permute) two rows, add to a row an integer multiple of another row, and
change sign of a row. The same for columns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def swap_rows(M,i,j):
 tmp=M[i]
 M[i]=M[j]
 M[j]=tmp

def swap_columns(M,i,j):
 num_of_columns=len(M)
 for x in range(num_of_columns):
  tmp=M[x][i]
  M[x][i] = M[x][j]
  M[x][j] = tmp

def add_to_row(M,x,k,s):
 num_righe,num_colonne=dims(M)
 for tmpj in range(num_colonne):
  M[x][tmpj] += k * M[s][tmpj]

def add_to_column(M,x,k,s):
 num_righe,num_colonne=dims(M)
 for tmpj in range(num_righe):
  M[tmpj][x] += k * M[tmpj][s]

def change_sign_row(M,x):
 num_righe,num_colonne=dims(M)
 for tmpj in range(num_colonne):
  M[x][tmpj] = - M[x][tmpj]

def change_sign_column(M,x):
 num_righe,num_colonne=dims(M)
 for tmpj in range(num_righe):
  M[tmpj][x] = - M[tmpj][x]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, two important functions. The first,  checks that the entry at place $(s,s)$ in the matrix $M$
is the only one non-zero in its $s$-th column under $s$ and $s$-th row at the right of $s$. If this is true,
then the algorithm will proceed.&lt;/p&gt;

&lt;p&gt;The second, will scan in the submatrix at the lower-right of $M_ {s,s}$, to check if there is any entry which
is not divisible by $M_ {s,s}$. If it cannot be found, then it returns an empty set.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def is_lone(M,s):
 num_righe,num_colonne=dims(M)
 if [M[s][x] for x in range(s+1,num_colonne) if M[s][x] != 0] + [ M[y][s] for y in range(s+1,num_righe) if M[y][s] != 0] == []:
  return True
 else:
  return False

def get_nextentry(M,s):
  # find and element which is not divisible by M[s][s]
  num_righe,num_colonne=dims(M)
  for x in range(s+1,num_righe):
   for y in range(s+1,num_colonne):
    if M[x][y] % M[s][s]  != 0:
     return (x,y)
  return None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given all these functions, the algorithm/proof is rather simple, as written in the folliwing block.
The main idea is to put at the UL corner $M_ {0,0}$ the GCD of all matrix entries,
by row/column operations.&lt;/p&gt;

&lt;p&gt;First, find the smallest non-zero entry, and put it in the UL corner.
Then, as in the Euclidean Algorithm, sum to all rows and columns suitable multiples of the first
row/column.
After this, either
all the elements in the $0$-th row and $0$-th column are zero except $M_ {0,0}$, or not.
If all the elements in the $0$-th row and $0$-th column V
except $M_ {0,0}$  are zero,
then either $M_ {0,0}$ divides all the entries of $M$,
or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If it does divide all&lt;/strong&gt;,
then proceed to the submatrix obtained by deleting the first row and the first column.
It is important to note that since $M_ {0,0}$ divides all the entries of $M$,
it will divide all the entries of the submatrix and also all the entries of
the subsequente modifications of the submatrix. Hence, when at the end the matrix will be
in diagonal form, the first term $M_ {0,0}$ will divide all the others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If it does not divide all&lt;/strong&gt;, then add to the first row the row containing the entry which is not
divisible by $M_ {0,0}$.
So, the new matrix is of the type with $M_ {0,0}$ at the UL corner, and
not all the elements in the $0$-th row and $0$-th column
except $M_ {0,0}$  are zero.&lt;/p&gt;

&lt;p&gt;Now go back  to the step of finding the new non-zero minimum, put it in $(0,0)$,  and repeat from there.&lt;/p&gt;

&lt;p&gt;Why in a finite number of steps $M_ {0,0}$ has to divide all the entries?
At the UL corner, $M_ {0,0}$ was chosen to be the minimum of non-zero terms
of $M$, and the new one will be $M&#39;_ {0,0} \leq M_ {0,0}$. But, if there was an entry&lt;br /&gt;
not divisible by $M_ {0,0}$, then $M&#39;_ {0,0} &amp;lt; M_ {0,0}$.
We show this with an example.
Assume $a$ does not divide $b$ (and hence $a\neq b$),
both positive. First, add the second row to the first.
$$
\begin{bmatrix}
a &amp;amp; 0 \\&lt;br /&gt;
0 &amp;amp; b
\end{bmatrix}
\mapsto
\begin{bmatrix}
a &amp;amp; b \\&lt;br /&gt;
0 &amp;amp; b
\end{bmatrix}
$$
Then, there are two cases: either $a &amp;lt; b$, and we do nothing,  or $a &amp;gt; b$,
and we permute the two columns.
$$
\mapsto
\begin{cases}
\begin{bmatrix}
a &amp;amp; b \\&lt;br /&gt;
0 &amp;amp; b
\end{bmatrix}
&amp;amp; \text{if $a&amp;lt;b$}
\\&lt;br /&gt;
\begin{bmatrix}
b &amp;amp; a \\&lt;br /&gt;
b &amp;amp; 0
\end{bmatrix}
&amp;amp; \text{if $b &amp;lt; a$}
\end{cases}
$$
After this, it is time to add suitable multiples. In the two cases,
it happens (adding forst rows, then columns) the following.
$$
\mapsto
\begin{cases}
\begin{bmatrix}
a &amp;amp; b-qa \\&lt;br /&gt;
0 &amp;amp; b
\end{bmatrix}
&amp;amp; \text{if $a&amp;lt;b$}
\\&lt;br /&gt;
\begin{bmatrix}
b &amp;amp; a-qb \\&lt;br /&gt;
0 &amp;amp; -a
\end{bmatrix}
&amp;amp; \text{if $b &amp;lt; a$}
\end{cases}
$$
If $a&amp;lt;b$, it is $|b-qa|&amp;lt;a$.
If $b&amp;lt;a$, it is $|a-qb| &amp;lt; b &amp;lt; a$.
Hence in both cases after the row/column operations, the minimum of the matrix entries
will be strictly smaller than $a$. Since this cannot happen indefinitively, after a finite
number of steps $M_ {0,0}$ will divide all the remaining entries in $M$.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def Smith(M):
 num_righe,num_colonne=dims(M)
 L = IdentityMatrix(num_righe)
 R = IdentityMatrix(num_colonne)
 maxs=min(num_righe,num_colonne)
 for s in range(maxs):
  print (&amp;quot;step %s/%s\n&amp;quot; % (s+1,maxs))
  print &amp;quot;M:&amp;quot;, display(M)
  while not is_lone(M,s):
   i,j = MinAij(M,s) # the non-zero entry with min |.|
   swap_rows(M,s,i)
   swap_rows(L,s,i)
   swap_columns(M,s,j)
   swap_columns(R,s,j)
   for x in range(s+1,num_righe):
    if M[x][s] != 0:
     k = M[x][s] // M[s][s]
     add_to_row(M,x,-k,s)
     add_to_row(L,x,-k,s)
   for x in range(s+1,num_colonne):
    if M[s][x] != 0:
     k = M[s][x] // M[s][s]
     add_to_column(M,x,-k,s)
     add_to_column(R,x,-k,s)
   if is_lone(M,s):
    res=get_nextentry(M,s)
    if res:
     x,y=res
     add_to_row(M,s,1,x)
     add_to_row(L,s,1,x)
    else:
     if M[s][s]&amp;lt;0:
      change_sign_row(M,s)
      change_sign_row(L,s)
 return L,R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A minor step is the one for changing sign of the diagonal entry, just in the case it is negative. At the end, the matrix $M$ will be in
 Smith Normal Form,
and the routine will return the two unimodular matrices $L$ and $R$ resulting from the row/columns operations respectively.
They are obtained by applying the same row/column operations on two identity matrices.&lt;/p&gt;

&lt;h2 id=&#34;example-the-triangulated-sphere&#34;&gt;Example: the triangulated sphere.&lt;/h2&gt;

&lt;p&gt;As an example, here we compute the Smith Normal Forms of the differentials of che chain complex of the triangulate $2$-sphere,
from &lt;a href=&#34;http://www.sagemath.org&#34; target=&#34;_blank&#34;&gt;sage&lt;/a&gt;. First, the differential $\partial_ 1 \from C_ 1 \cong \ZZ^6 \to C_ 0 \cong \ZZ^4 $.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sage: K=simplicial_complexes.Sphere(2)
sage: CK=K.chain_complex()
sage: 
sage: M=matrix(ZZ,CK.differential(1)).numpy().tolist()
sage: Smith(M)
step 1/4

M: [-1, -1, -1, 0, 0, 0]
[1, 0, 0, -1, -1, 0]
[0, 1, 0, 1, 0, -1]
[0, 0, 1, 0, 1, 1]

step 2/4

M: [1, 0, 0, 0, 0, 0]
[0, 0, 0, -1, -1, 1]
[0, 1, 1, 1, 1, 0]
[0, -1, -1, 0, 0, -1]

step 3/4

M: [1, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0]
[0, 0, 1, 1, 1, 1]
[0, 0, -1, -1, -1, -1]

step 4/4

M: [1, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 0, 0]

([[0, 0, 0, 1], [-1, 0, 0, 0], [-1, -1, 0, 0], [1, 1, 1, 1]],
 [[0, 1, -1, 1, 1, 0],
  [0, 0, 1, -1, -1, -1],
  [0, 0, 0, 0, 0, 1],
  [0, 0, 0, 1, 0, 0],
  [0, 0, 0, 0, 1, 0],
  [1, 0, 0, 0, -1, -1]])
sage: print &amp;quot;\nsmith form of d_1:\n&amp;quot;, display(M)

smith form of d_1:
[1, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 0, 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hence $\operatorname{coker} \partial_ 1 \cong  \ZZ^1$ and $\ker \partial_ 1 \cong  \ZZ^3$.
What about the generators of $\ker \partial_ 1$?
Let $L$ and $R$ denote the left and right matrices, and $M$ the matrix of $\partial_ 1$.
Then let $S$ denote the Smith Normal Form of $\partial_ 1$, so that
$LMR = S$.
Since $\ker S$ is generated by the three vectors
$$
\begin{bmatrix}
0\\&lt;br /&gt;
0\\&lt;br /&gt;
0\\&lt;br /&gt;
1\\&lt;br /&gt;
0\\&lt;br /&gt;
0
\end{bmatrix}
\begin{bmatrix}
0\\&lt;br /&gt;
0\\&lt;br /&gt;
0\\&lt;br /&gt;
0\\&lt;br /&gt;
1\\&lt;br /&gt;
0
\end{bmatrix}
\begin{bmatrix}
0\\&lt;br /&gt;
0\\&lt;br /&gt;
0\\&lt;br /&gt;
0\\&lt;br /&gt;
0\\&lt;br /&gt;
1
\end{bmatrix},
$$
then $\ker LM = \ker M$ is generated by their images by $R$, i.e.
the last three columns of $R$:
$$
\begin{bmatrix}
1\\&lt;br /&gt;
-1\\&lt;br /&gt;
0\\&lt;br /&gt;
1\\&lt;br /&gt;
0\\&lt;br /&gt;
0
\end{bmatrix}
\begin{bmatrix}
1\\&lt;br /&gt;
-1\\&lt;br /&gt;
0\\&lt;br /&gt;
0\\&lt;br /&gt;
1\\&lt;br /&gt;
-1
\end{bmatrix}
\begin{bmatrix}
0\\&lt;br /&gt;
-1\\&lt;br /&gt;
1\\&lt;br /&gt;
0\\&lt;br /&gt;
0\\&lt;br /&gt;
-1
\end{bmatrix},
$$
These three cycles are, in the standard basis of $1$-simplices of $K$
$[(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)]$:
$$
[01]+[20]+[12] = [01] + [12] + [20]~,
$$
$$
[01]+[20]+[13]+[32] = [01] + [13] + [32] + [21]~,
$$
$$
[20] + [03] + [32]~.
$$&lt;/p&gt;

&lt;p&gt;Furthermore, about the differential $\partial_ 2$ from $C_ 2 \cong \ZZ^4 \to C_ 1 \cong \ZZ^6 $.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sage: M=matrix(ZZ,CK.differential(2)).numpy().tolist()
sage: Smith(M)
step 1/4

M: [1, 1, 0, 0]
[-1, 0, 1, 0]
[0, -1, -1, 0]
[1, 0, 0, 1]
[0, 1, 0, -1]
[0, 0, 1, 1]

step 2/4

M: [1, 0, 0, 0]
[0, 0, 1, -1]
[0, -1, -1, 0]
[0, 0, -1, 1]
[0, 1, 1, 0]
[0, 1, 0, 1]

step 3/4

M: [1, 0, 0, 0]
[0, 1, 0, 0]
[0, 0, -1, -1]
[0, 0, -1, -1]
[0, 0, 1, 1]
[0, 0, 1, 1]

step 4/4

M: [1, 0, 0, 0]
[0, 1, 0, 0]
[0, 0, 1, 0]
[0, 0, 0, 0]
[0, 0, 0, 0]
[0, 0, 0, 0]

([[0, 0, 0, 0, 0, 1],
  [1, 0, 0, 0, 0, 0],
  [1, 1, 0, 0, 0, 0],
  [0, 1, 0, 1, 0, -1],
  [-1, -1, 0, 0, 1, 1],
  [1, 1, 1, 0, 0, 0]],
 [[0, 1, -1, 1], [0, 0, 1, -1], [0, 0, 0, 1], [1, 0, 0, -1]])
sage: print &amp;quot;\nsmith form of d_2:\n&amp;quot;, display(M)

smith form of d_2:
[1, 0, 0, 0]
[0, 1, 0, 0]
[0, 0, 1, 0]
[0, 0, 0, 0]
[0, 0, 0, 0]
[0, 0, 0, 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Therefore, $\ker \partial_ 2 \cong \ZZ$, and $\operatorname{coker} \partial_ 2 \cong \ZZ^3$.
The generator of $\ker \partial_ 2$ is, as above, the last column of $R$,
which is
$$
\begin{bmatrix}
1\\&lt;br /&gt;
-1\\&lt;br /&gt;
1\\&lt;br /&gt;
-1\\&lt;br /&gt;
\end{bmatrix}
$$
which corresponds to the cycle
in the standard basis $ [ (0, 1, 2), (0, 1, 3), (0, 2, 3), (1, 2, 3) ] $
$$
  [ 012 ] - [ 013 ] + [ 023 ] - [ 123 ] = - ( [ 123 ] - [ 023 ] + [ 013 ] - [ 012 ] ) =
$$
$$
= - \sum_ {j=0}^3 (-1)^j [ 0 \ldots \hat j \ldots 3 ]~.
$$&lt;/p&gt;

&lt;p&gt;Is it possible to compute the homology with these data?&lt;/p&gt;

&lt;h2 id=&#34;computing-homology-groups&#34;&gt;Computing homology groups&lt;/h2&gt;

&lt;p&gt;Now, consider just $H_ 1(K) = \ker \partial_ 1 / \operatorname{Im} \partial_ 2$.
Let $Z_ 1 = \ker \partial_ 1$ and $B_ 1 = \operatorname{Im} \partial_ 2$.
Let $S_ 1$ and $S_ 2$ the SNF&#39;s of $ \partial_ 1 $ and  $ \partial_ 2 $,
and $L_ 1$ , $L_ 2$, $R_ 1$ and $R_ 2$ the unimodular matrices of row/columns operations.
Then $L_ 1 \partial_ 1 R_ 1 = S_ 1$ and $L_ 2 \partial_ 2 R_ 2 = S_ 2$,
as in the following diagram.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;http://blog.dlfer.xyz/img/c2c1.svg&#34; alt=&#34;Chain complex diagram&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Let $\alpha_ 1$, $\alpha_ 2$, $\ldots$, $\alpha_ q$
be the &lt;em&gt;elementary divisors&lt;/em&gt; of $\partial_ 2$, i.e.
the non-zero diagonal terms of $S_ 2$,
and $\beta_ 1$, $\beta_ 2$, $\ldots$, $\beta_ r$
the &lt;em&gt;elementary divisors&lt;/em&gt; of $\partial_ 1$, i.e.
the non-zero diagonal terms of $S_ 1$.
Let $\ve_ 1$, $\ve_ 2$, $\ldots$, $\ve_ {c_ 1}$ be
the standard basis of $\ZZ^{c_ 1}$.&lt;/p&gt;

&lt;p&gt;Since $\ker S_ 1$ is generated by the
$c_ 1 - r$ elements $\ve_ {r+1}$, $\ldots$,
$\ve_ {c_ 1}$,
as show above, $Z_ 1$ is freely generated by the last $c_ 1 - r$ columns of $R_ 1$.&lt;/p&gt;

&lt;p&gt;On the other hand,
$\operatorname{Im} S_ 2$ is freely generated by
$$
\alpha_ 1 \ve_ 1, \alpha_ 2 \ve_ 2, \ldots, \alpha_ q \ve_ q
$$
hence
$B_ 1\subset Z_ 1 \subset C_ 1$ is freely generated by
$\alpha_ j$-multiples of the first $q$ columns of the inverse $L_ 2^{-1}$.
Now, $C_ 1 = Q \oplus Q&#39;$,
where $Q$ is the subgroup generated by the first $q$ columns of $L_ 2^{-1}$,
and $Q&#39;$ the subgroup generated by the last $c_ 1 - q$ columns of $L_ 2^{-1}$.&lt;/p&gt;

&lt;p&gt;By construction $B_ 1 \subset Q$, and since $C_ 1$ is torsion-free, $Q\subset Z_ 1$.
Now, define
 $Q&#39;&#39; = Q&#39; \cap Z_ 1$, which is a subgroup of $Z_ 1$.  Since $Q&#39;&#39; \cap Q = 0$,
it is defined the direct sum
$Q\oplus Q&#39;&#39; \subset Z_ 1$. If $x \in Z_ 1 \subset C_ 1 = Q \oplus Q&#39;$, then
$x=q + q&#39;$ with $q \in Q$ and $q&#39; \in Q&#39;$,
and $0 = \partial_ 1 x = \partial_ 1 q + \partial_ 1 q&#39; = \partial_ 1 q&#39;$,
hence $x=q + q&#39;$ with $q \in Q$ and $q&#39; \in Q&#39; \cap Z_ 1 = Q&#39;&#39;$,
and hence $Z_ 1 = Q \oplus Q&#39;&#39;$.&lt;/p&gt;

&lt;p&gt;Since $Z_ 1=Q\oplus Q&#39;&#39;$ is a free abelian group of rank $c_ 1 - r$,
and  $Q$ is a free abelian subgroup of rank $q$,&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(1)&lt;/dt&gt;
&lt;dd&gt;$Q&#39;&#39;\subset Z_ 1$ is a free abelian group of rank $c_ 1 - r - q$.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Furthermore, since $B_ 1 \subset Q$,  the quotient $Z_ 1 / B_ 1$ splits as
$$
\dfrac{Z_ 1 }{ B_ 1  } =
\dfrac{Q \oplus  Q&#39;&#39;}{ B_ 1\oplus 0}
\cong
\dfrac{Q}{ B_ 1 } \oplus Q&#39;&#39;&lt;br /&gt;
 \cong
$$
$$
\cong \ZZ_ {\alpha_ 1} \oplus  \ldots \oplus
\ZZ_ {\alpha_ q} \oplus
\ZZ^{c_ 1 - r - q},
$$
where $\ZZ_ \alpha$ denotes the cyclic group
$\ZZ / \alpha \ZZ$ of order $\alpha$.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(2)&lt;/dt&gt;
&lt;dd&gt;The homology group $H_ j$ is isomorphic to
$ \ZZ_ {\alpha_ 1} \oplus  \ldots \oplus
\ZZ_ {\alpha_ q} \oplus
\ZZ^{c_ j - r - q}$,
where $\alpha_ 1$, $\ldots,$ $\alpha_ q$ are the elementary divisors of $S_ {j+1}$,
$c_ j$ the rank of $C_ j$,
and $r$ the number of elementary divisors of $S_ j$.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;So, for the chain complex of the sphere:
$c_ 2 = 4$, $c_ 1 = 6$, $c_ 0 = 4$;
from $S_ 1$:
$\beta_ 1 = \beta_ 2 = \beta_ 3 = 1$,
$r= 3$;
from $S_ 2$:
$\alpha_ 1 = \alpha_ 2 = \alpha_ 3= 1$,
$q=3$.&lt;/p&gt;

&lt;p&gt;Hence, for the sphere,
$$
\begin{aligned}
H_ 0 &amp;amp;  \cong \ZZ_ 1 \oplus \ZZ_ 1 \oplus \ZZ_ 1 \oplus \ZZ^{4-0-3} = \ZZ \\\
H_ 1 &amp;amp; \cong \ZZ_ 1 \oplus \ZZ_ 1 \oplus \ZZ_ 1 \oplus \ZZ^{6-3-3} = 0 \\&lt;br /&gt;
H_ 2 &amp;amp; \cong \ZZ^{4-0-3} = \ZZ .
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remark:&lt;/strong&gt; We did not compute explicit isomorphisms of $H_ j \cong Z_ j / B_ j$.
In fact, we even did not compute the inverse $L_ j^{-1}$. To have an explicit presentation
(generators  and relations) of $H_ j$ one needs to proceed as follows.&lt;/p&gt;

&lt;p&gt;First, generators of $\ker S_ 1$ in $\ZZ^{c_ 1}$ are $\ve_ {q+1}$, $\ldots,$ $\ve_ {c_ 1}$.
Next, generators of $R_ 1^{-1}Q$ are $\vw_ j = R_ 1^{-1} L_ 2^{-1} \ve_ j$ for $j=1,\ldots, q$.
Since for each $j=1,\ldots, q$, $L_ 2^{-1} \ve_ j \in Q$, hence
$$ S_ 1 \vw_ j = S_ 1 R_ 1^{-1} L_ 2^{-1} \ve_ j = L_ 1 \partial_ 1 L_ 2^{-1} \ve_ j = 0, $$
which means that the first $r$ entries of $\vw_ j$ are zero.
Note that the projection  $p\from Z_ 1 = Q\oplus Q&#39;&#39; \to Q $,
after $R_ 1^{-1}$, is a projection
$ \ZZ^{c_ 1 - r}  \to \ZZ^{q}$. Its kernel is $Q&#39;&#39;$.&lt;/p&gt;

&lt;p&gt;So, let $T$ denote the $(c_ 1 -r ) \times q$ matrix
whose $q$ columns are the last $c_ 1 - r$ entries of $\vw_ j$,
for $j=1,\ldots, q$. It represents the monomorphism
$T\from R_ 1^{-1} Q \to \ker S_ 1$, or
$T \from  \ZZ^q \to \ZZ^{c_ 1 - r}.$
Let $S_ T$ its Smith Normal Form, and $L_ T$ and $R_ T$ the unimodular matrices
such that $S_ T = L_ T T R_ T$.
By the arguments above, $S_ T $ has $q$ $1$&#39;s as elementary divisors,
and the rest are $0$.
Furthermore, the unimodular matrix
$L_ T ^{-1} \from \ZZ^{c_ 1 - r} \to \ZZ^{c_ 1 - r}$&lt;br /&gt;
sends the first $q$ elements of the standard basis $\ve_ j$, $j=1,\ldots, q$,
to a set of generators for $Q$ (the image of $T$ in $\ker S_ 1$).
The latter $c_ 1 - r - q$ columns of $L_ T^{-1}$ are the coefficients
of a set of generators of $Q&#39;&#39;$ in the standard basis of $\ker S_ 1$,
which we can denote by $\vw_ {q+1}, \ldots, \vw_ {c_ 1 - r}$ (by adding
$q$ zeros at the head of the $(c_ 1 - r)$-tuple).&lt;/p&gt;

&lt;p&gt;So, going back to $C_ 1$, $Z_ 1$ is generated by
the elements of $Q$, i.e.
$$ R_ 1 \vw_ 1 = L_ 2^{-1} \ve_ 1, \ldots R_ 1 \vw_ q = L_ 2^{-1} \ve_ q, $$
and the elements of  \( Q&#39;&#39; \),
i.e.&lt;br /&gt;
$$
R_ 1 \vw_ {q+1} =  R_ 1 L_ T^{-1} \ve_ {q+1} \ldots R_ 1 \vw_ {c_ 1 - r} =  R_ 1 L_ T^{-1} \ve_ {c_ 1 - r}
$$
where suitable zeros are added when necessary.
More in &lt;a href=&#34;http://link.springer.com/book/10.1007%2Fb97315&#34; target=&#34;_blank&#34;&gt;Computational Homology&lt;/a&gt;,
by &lt;em&gt;Tomasz Kaczynski, Konstantin Mischaikow, Marian Mrozek&lt;/em&gt;, Springer, 2004.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Császár torus, python and sagemath</title>
          <link>http://blog.dlfer.xyz/post/2016-10-19-csaszar-torus/</link>
          <pubDate>Wed, 19 Oct 2016 13:55:55 CEST</pubDate>
          <author></author>
          <guid>http://blog.dlfer.xyz/post/2016-10-19-csaszar-torus/</guid>
          <description>

&lt;h2 id=&#34;the-simplicial-complex&#34;&gt;The simplicial complex&lt;/h2&gt;

&lt;p&gt;Consider the (abstract) simplicial  $T$ defined as follows:
vertices are
$$
X=\{ 0,1,2,3,4,5,6 \} = \{ j \mod 7 \}.
$$&lt;/p&gt;

&lt;p&gt;Now, for each $x\in X$ let $\Phi_ x$ denote the following subsets of $2^X$ :
$$
\begin{aligned}
H_ x &amp;amp;=
\{ \{j,j+1\}  : j =0 \ldots 6 \}
= \{ \{j,j-1\}  : j =0 \ldots 6 \}
\\&lt;br /&gt;
V_ x &amp;amp;=
\{ \{ j,j+x \}  : j =0 \ldots 6 \}
= \{ \{ j,j-x \}  : j =0 \ldots 6 \}
\\&lt;br /&gt;
D_ x &amp;amp;=
\{ \{ j, j + x+1 \} : j = 0 \ldots 6 \}
 = \{ \{ j, j - x-1 \} : j = 0 \ldots 6 \}
\\&lt;br /&gt;
\Phi_ x &amp;amp; =
H_ x
\cup
V_ x
\cup
D_ x
\end{aligned}
$$
where all the integers $j$ are meant $\mod 7$.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(1)&lt;/dt&gt;
&lt;dd&gt;The set $\Phi_ x$ has 21 elements (i.e., it is the set of all possible subsets of $X$ of cardinality $2$)
if and only if $x=2$ or $x=4$.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;Proof&lt;/em&gt;:
$\Phi_ x$ has 21 elements if and only if the three sets $H_ x$, $V_ x$ and $D_ x$ are disjoint.
Hence if they are disjoint then $x\neq 0$ (otherwise $D_ x =H_ x$),
$x\neq 1,6$ (otherwise $H_ x = V_ x$),
$x\neq 3$ (otherwise $\{0,3\} = \{ 3,7 \} \in V_ x \cap D_ x $),
and
$x\neq 5$ (otherwise $\{0,6\} = \{6,7 \} \in D_ x \cap H_ x$).
We are left with the cases
$x=2$ or $x=4$.
Lazy idea: write a few lines of python (2.7) and compute the number of elements
of $\Phi_ x$ for each $x$...&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def NumberOfPhi(x):
...  H= [ frozenset([j,(j+1) % 7 ]) for j in range(7) ]
...  V= [ frozenset([j,(j+x) % 7 ]) for j in range(7) ]
...  D = [ frozenset([j,(j+x+1) % 7 ]) for j in range(7) ]
...  return len( set(H) | set(V) | set(D) )
... 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; [ NumberOfPhi(x) for x in range(7) ]
[14, 14, 21, 14, 21, 14, 14]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the end of the proof. &lt;em&gt;(/Proof)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, for $2$-simplexes we can proceed in a similar way. For each $x$,
let
$$ \begin{aligned}
L_ x  &amp;amp; = \{ \{ j,j+1,j+x+1 \} : j = 0 \ldots 6 \} \\&lt;br /&gt;
U_ x  &amp;amp; = \{ \{ j, j+x, j+x+1 \} : j = 0 \ldots 6 \}.
\end{aligned}
$$
Hence
$$ \begin{aligned}
L_ 2  &amp;amp; = \{ \{ j,j+1,j+3 \} : j = 0 \ldots 6 \} \\&lt;br /&gt;
U_ 2  &amp;amp; = \{ \{ j, j+2, j+3 \} : j = 0 \ldots 6 \} \\&lt;br /&gt;
L_ 4  &amp;amp; = \{ \{ j,j+1,j+5 \} : j = 0 \ldots 6 \} \implies L_ 4 = U_ 2\\&lt;br /&gt;
U_ 4  &amp;amp; = \{ \{ j, j+4, j+5 \} : j = 0 \ldots 6 \} \implies U_ 4 = L_ 2.
\end{aligned}
$$&lt;/p&gt;

&lt;p&gt;A little bit of typing and&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def Inter(x):
...  L = [ frozenset( [j,(j+1)%7, (j+x+1)%7 ]) for j in range(7) ]
...  U = [ frozenset( [j,(j+x)%7, (j+x+1)%7 ]) for j in range(7) ]
...  return len( set(L) | set(V) )
... 
&amp;gt;&amp;gt;&amp;gt; [ (x,Inter(x)) for x in range(7) ]
[(0, 14), (1, 14), (2, 14), (3, 14), (4, 14), (5, 14), (6, 14)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This implies that for $x=2,4$ the following is an abstract simplicial complex:
$$
T = ( X, \{ L_ 2 \cup U_ 2 \cup \ldots \} )
 = ( X, \{ L_ 4 \cup U_ 4 \cup \ldots \} ),
$$
where the dots stand for all possible $1$-dimensional (i.e. 21) and $0$-dimensional (i.e. 7) simplexes.
The complex can be represented as in the following badly drawn diagram:
&lt;center&gt;
&lt;img src=&#34;http://blog.dlfer.xyz/img/toro.svg&#34; alt=&#34;Csaszar Torus&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;With a little bit of imagination and glueing, it is possible to &amp;quot;prove&amp;quot; the following proposition.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(2)&lt;/dt&gt;
&lt;dd&gt;The abstract simplicial complex $T$ has the geometric realization which is homeomorphic to the torus $T^2 = S^1 \times S^1$.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;Proof&lt;/em&gt;:
It follows from the badly drawn diagram. The $2$-simplices $U_ 2$
are the upper diagonal triangles. The $2$-simplices
$L_ 2$ are the lower diagonal triangles.
The $21$ elements of $\Phi_ 2$ are all the edges (up to identification).&lt;br /&gt;
&lt;em&gt;(/Proof)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This complex is actually embeddable in $\RR^3$: on the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cs%C3%A1sz%C3%A1r_polyhedron&#34; target=&#34;_blank&#34;&gt;Wikipedia page&lt;/a&gt;
one can find an embedding;
more details a the &lt;a href=&#34;http://www.eg-models.de/models/Classical_Models/2001.02.069/_preview.html&#34; target=&#34;_blank&#34;&gt;page in the Archive of Electronic Geometry Models&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;sagemath&#34;&gt;SageMath&lt;/h2&gt;

&lt;p&gt;Here is a plain sage session. According to &lt;a href=&#34;http://doc.sagemath.org/html/en/reference/homology/sage/homology/examples.html&#34; target=&#34;_blank&#34;&gt;the documentation&lt;/a&gt;, the function &lt;code&gt;Torus&lt;/code&gt; returns Csaszar&#39;s Torus.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sage&#34;&gt;sage: T = simplicial_complexes.Torus();
sage: T.faces()
{-1: set([()]),
 0: set([(4,), (5,), (3,), (0,), (1,), (6,), (2,)]),
 1: set([(0, 6),
      (0, 5),
      (3, 6),
      (1, 2),
      (1, 5),
      (1, 6),
      (1, 3),
      (0, 3),
      (2, 6),
      (2, 4),
      (1, 4),
      (3, 5),
      (3, 4),
      (2, 3),
      (4, 6),
      (2, 5),
      (5, 6),
      (0, 2),
      (0, 1),
      (0, 4),
      (4, 5)]),
 2: set([(2, 4, 5),
      (0, 1, 5),
      (0, 4, 6),
      (1, 3, 6),
      (0, 3, 5),
      (1, 2, 4),
      (2, 3, 5),
      (1, 3, 4),
      (2, 3, 6),
      (0, 2, 6),
      (1, 5, 6),
      (0, 1, 2),
      (4, 5, 6),
      (0, 3, 4)])}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a little bit of reordering, faces of sage&#39;s $T$ are&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[(0, 1, 2),
 (0, 1, 5),
 (0, 2, 6),
 (0, 3, 4),
 (0, 3, 5),
 (0, 4, 6),
 (1, 2, 4),
 (1, 3, 4),
 (1, 3, 6),
 (1, 5, 6),
 (2, 3, 5),
 (2, 3, 6),
 (2, 4, 5),
 (4, 5, 6)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;while faces in $U_ 2 \cup L_ 2$ are different.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[(0, 1, 3),
 (0, 1, 5),
 (0, 2, 3),
 (0, 2, 6),
 (0, 4, 5),
 (0, 4, 6),
 (1, 2, 4),
 (1, 2, 6),
 (1, 3, 4),
 (1, 5, 6),
 (2, 3, 5),
 (2, 4, 5),
 (3, 4, 6),
 (3, 5, 6)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It it just a permutation of indices, or they are distinct as simplicial complexes?
The automorphism group of $T$ has 42 elements&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sage: G=T.automorphism_group()
sage: len(G)
42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and hence there are 120 = 7!/42 distinct possible classes of
 permutations. The easiest is $(0,6)$, which transforms one set of 2-faces into the other.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(3)&lt;/dt&gt;
&lt;dd&gt;The two simplicial complexes are equivalent.
&lt;br /&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;A little bit of &lt;a href=&#34;www.sagemath.org&#34; target=&#34;_blank&#34;&gt;sagemath&lt;/a&gt; help in finding such permutations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;T = simplicial_complexes.Torus();

Facce= list(T.faces()[2])
Facce.sort()

def L(x):
 return set([ frozenset( [j,(j+1) % 7, (j+x+1) % 7 ]) for j in range(7) ] )
def U(x):
 return set([ frozenset( [j,(j+x) % 7, (j+x+1) % 7 ]) for j in range(7) ] )

myFacce=[tuple(a) for a in ( L(2) | U(2) ) ]
myFacce.sort()

G =SymmetricGroup((0,1,2,3,4,5,6))

def PermutedFacce(g,ListOfTuples):
 result=[]
 for t in ListOfTuples:
  goft=[g(x) for x in t ]
  goft.sort()
  result = result + [tuple(goft)]
 result.sort()
 return result

found=0
for g in G:
 pFacce=PermutedFacce(g,Facce)
 if pFacce == myFacce:
  found += 1
  print &amp;quot;found n. &amp;quot;, found, &amp;quot; : &amp;quot;, g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And interactively loading it (saved as &lt;code&gt;c.sage&lt;/code&gt;) gives the following session.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sage: runfile (&amp;quot;c.sage&amp;quot;)
found n.  1  :  (2,5,3)(4,6)
found n.  2  :  (1,2,3,4,5,6)
found n.  3  :  (1,3,6,5,2)
found n.  4  :  (1,4,3)(2,6)
found n.  5  :  (1,5)(2,4)
found n.  6  :  (1,6,3,5,4)
found n.  7  :  (0,1)(2,3,6,4)
found n.  8  :  (0,1,2,6,5,4)
found n.  9  :  (0,1,3,5)(2,4,6)
found n.  10  :  (0,1,4,5,3)
found n.  11  :  (0,1,5,6,3,2)
found n.  12  :  (0,1,6)(2,5)(3,4)
found n.  13  :  (0,2,6,1)(3,5)
found n.  14  :  (0,2,4,3)(5,6)
found n.  15  :  (0,2)(1,3,4)
found n.  16  :  (0,2,5,1,4)(3,6)
found n.  17  :  (0,2,3,1,5,4,6)
found n.  18  :  (0,2,1,6,4,5)
found n.  19  :  (0,3,4,6,5,1)
found n.  20  :  (0,3,6,2)(4,5)
found n.  21  :  (0,3,1,2,5)
found n.  22  :  (0,3,5,6)(1,4,2)
found n.  23  :  (0,3)(1,5,2,6,4)
found n.  24  :  (0,3,2,4)(1,6)
found n.  25  :  (0,4,1)(2,5,6)
found n.  26  :  (0,4)(2,3,5)
found n.  27  :  (0,4,6,3)(1,2)
found n.  28  :  (0,4,5,1,3,2,6)
found n.  29  :  (0,4,3,6,1,5)
found n.  30  :  (0,4,2)(1,6,5,3)
found n.  31  :  (0,5,4,3,2,1)
found n.  32  :  (0,5)(2,6,3,4)
found n.  33  :  (0,5,3,6)(1,2,4)
found n.  34  :  (0,5,6,4)(1,3)
found n.  35  :  (0,5,2)(1,4,6)
found n.  36  :  (0,5,1,6,2,3)
found n.  37  :  (0,6,3,1)(2,4,5)
found n.  38  :  (0,6)
found n.  39  :  (0,6,4,3,5,1,2)
found n.  40  :  (0,6,1,3)(2,5,4)
found n.  41  :  (0,6,5)(1,4)(2,3)
found n.  42  :  (0,6,2,1,5,3,4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Equivalently, and shortly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sage: K=SimplicialComplex(myFacce)
sage: T=simplicial_complexes.Torus()
sage: T.is_isomorphic(K)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;embedding-the-complex-in-rr-3&#34;&gt;Embedding the complex in $\RR^3$&lt;/h2&gt;

&lt;p&gt;The problem of embedding is not trivial. But ...&lt;/p&gt;

&lt;h2 id=&#34;poincaré-homology-3-sphere&#34;&gt;Poincaré Homology 3-sphere&lt;/h2&gt;

&lt;p&gt;From &lt;a href=&#34;http://doc.sagemath.org/html/en/reference/homology/sage/homology/examples.html#sage.homology.examples.PoincareHomologyThreeSphere&#34; target=&#34;_blank&#34;&gt;sagemath documentation&lt;/a&gt;, and adding on...&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sage: Sigma3 = simplicial_complexes.PoincareHomologyThreeSphere()
sage: Sigma3.homology()
{0: 0, 1: 0, 2: 0, 3: Z}
sage: Sigma3.fundamental_group().cardinality()
sage: [len(Sigma3.faces()[x]) for x in range(4)]
[16, 106, 180, 90]
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Categorical products and coproducts </title>
          <link>http://blog.dlfer.xyz/post/2016-10-12-coproducts/</link>
          <pubDate>Wed, 12 Oct 2016 13:57:52 CEST</pubDate>
          <author></author>
          <guid>http://blog.dlfer.xyz/post/2016-10-12-coproducts/</guid>
          <description>

&lt;h2 id=&#34;universal-property-of-coproducts&#34;&gt;Universal property of coproducts&lt;/h2&gt;

&lt;p&gt;Let $X_1, X_2$ be objects of the category $\vC$. The &lt;strong&gt;coproduct&lt;/strong&gt; of $X_1$ and $X_2$ (if it exists) is a space $X_1 \coprod X_2$ and two morphisms
$j_1 \from X_1 \to X_1 \coprod X_2$,
$j_2 \from X_2 \to X_1 \coprod X_2$ such that the following diagram
commutes &lt;em&gt;(the first is with MathJax AMScd, the second is an embedded SVG produced with xypic)&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;$\require{AMScd}$
\begin{CD}
X_1 @&amp;gt;{j_1}&amp;gt;&amp;gt; X_1 \coprod X_2 @&amp;lt;{j_2}&amp;lt;&amp;lt; X_2  \\&lt;br /&gt;
@|  @VVhV  @|  \\&lt;br /&gt;
X_1 @&amp;gt;{h_1}&amp;gt;&amp;gt; Z  @&amp;lt;{h_2}&amp;lt;&amp;lt; X_2  \\&lt;br /&gt;
\end{CD}&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;http://blog.dlfer.xyz/img/coprod1.svg&#34; alt=&#34;Diagram for coproduct of two objects&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Given a set $S$ of indices, the &lt;strong&gt;coproduct&lt;/strong&gt; of a family
$X _ {s}$,
$s\in S$, of objects is (if it exists) the
space $\coprod _ {s \in S} X _ s $, together with
morphisms $j _ \alpha
\from X _ \alpha \to \coprod _ {s \in S} X_ s$,
 such that for each $Z$ and each family of morphisms
$h_ \alpha \from X_ \alpha \to Z$
there exists a unique $h\from \coprod_ {s \in S} X_ s \to Z$
such that for each $\alpha \in S$ on has $hj_ \alpha = h_ \alpha$, i.e. the following diagram commutes:
&lt;center&gt;
&lt;img src=&#34;http://blog.dlfer.xyz/img/coprod2.svg&#34; alt=&#34;Diagram of coproduct of a family of objects&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(1)&lt;/dt&gt;
&lt;dd&gt;The coproduct in $\mathbf{Top}_*$ is the wedge of the pointed spaces.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;Proof&lt;/em&gt;:
For each $\alpha \in S$, let $x_ \alpha \in X_ \alpha$ denote
the base-point of $X_ \alpha$.
Let $\bigvee_ {s \in S} X_ s$
denote the disjoint union of all $X_ \alpha$, quotient after
the equivalence relation with a single non-trivial
equivalence class with all base-points
$x_ s$, and with the quotient topology.&lt;br /&gt;
Given $h_ \alpha$, pointed maps, $h_ \alpha (x_ \alpha) = z_ 0$,
where $z_ 0$ is the base-point of $Z$. Hence
the map defined on the disjoint union (which is continuous)
induces a (continuous) map on the quotient
$h \from \bigvee_ {s \in S} X_ s \to Z$.
&lt;em&gt;(/Proof)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;products&#34;&gt;Products&lt;/h2&gt;

&lt;p&gt;Reversing arrows, one define the &lt;strong&gt;product&lt;/strong&gt;, denoted by
$\prod_ {s \in S} X_ s$,
together with projections
$p_ \alpha \from \prod_ {s \in S} X_ s \to X_ \alpha$,
in any category
$\mathbf{C}$, with the same universal property.
&lt;center&gt;
&lt;img src=&#34;http://blog.dlfer.xyz/img/prod1.svg&#34; alt=&#34;Diagram of coproduct of a family of objects&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;By definition, the product topology in $\mathbf{Top}$ is the
topology on the categorical product, i.e. the topology
on $\prod_ {s \in S} X_ s$
such that a function $f\from Z \to \prod_ {s \in S} X_ s$
is continuous if and only if its components
$f_ \alpha = p_ \alpha f$ are continuous.&lt;/p&gt;

&lt;p&gt;One can show that the &lt;strong&gt;product topology&lt;/strong&gt; is generated by the base
of all subsets of type
$\prod_ {s \in S} U_ s
\subset
\prod_ {s \in S} X_ s$,
where for each $\alpha\in S$ the subspace $U_ \alpha \subset X_ \alpha$
is an open subset of $X_ \alpha$,
and for all but a &lt;strong&gt;finite number&lt;/strong&gt; of $\alpha$&#39;s the equality
$U_ \alpha = X_ \alpha$ holds.
The topology generated by subsets $\prod_ {s \in S} U_ s$
without the finiteness condition is the &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Box_topology&#34; target=&#34;_blank&#34;&gt;box topology&lt;/a&gt;&lt;/strong&gt;,
which is not equivalent to the product topology.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(2)&lt;/dt&gt;
&lt;dd&gt;The product in $\mathbf{Top}_ *$ is the cartesian product,
with the &lt;strong&gt;product topology&lt;/strong&gt;. The base point
of $\prod_ {s \in S } (X_ s, \hat x_ s) $
is $(\hat x_ s)_ {s \in S}$.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;Proof&lt;/em&gt;:
Let $(x_ s)_ {s \in S}$ denote a generic element of
the product
$ \prod_ {s \in S } (X_ s, \hat x_ s) $,
with
$x_ s \in X_ s$ for each $s \in S$.
Given maps $h_ \alpha$, the map $h$ defined by
$h(z) = (h_ \alpha(z))_ {\alpha\in S}$ is well-defined and continuous
in $\mathbf{Top}$. Furthermore, if $\hat z\in Z$ is the base-point,
then $h_ \alpha(\hat z) = \hat x_ \alpha$ for each $\alpha$,
hence
$h(\hat z)$ is the base-point in $\prod_ {\alpha \in S } (X_ \alpha, \hat x_ \alpha)$.
&lt;em&gt;(/Proof)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If $X_ \alpha$ does not depend upon $\alpha$,
then the product
$\prod_ {\alpha \in S} X_ \alpha$ is also
denoted as
$X^S$ and is the space of all functions $S \to X$.
The projections $p_ \alpha \from X^S \to  X$
are therefore the evaluations $x \in X^S \mapsto x(\alpha) \in X$.
Hence a sequence $x_ n$ of functions $S \to X$
converges in the product topology if and only if
for each projection $p_ \alpha$ the projection
$p_ \alpha(x_ n)$ converges, which means
that $x_ n(\alpha)$ converges for each $\alpha$,
or that $x_n$ converges pointwise.&lt;/p&gt;

&lt;h2 id=&#34;free-abelian-groups&#34;&gt;Free abelian groups&lt;/h2&gt;

&lt;p&gt;The free abelian group (i.e., $\ZZ$-module)
 generated by the set $S$ is
the coproduct in $\mathbf{Ab}$
$$
\ZZ [ S ] = \coprod_ {\alpha \in S} \ZZ = \bigoplus_ { \alpha \in S} \ZZ ,
$$
since the coproduct in $\mathbf{Ab}$ is the direct sum $\bigoplus$.&lt;/p&gt;

&lt;p&gt;The free (non-abelian) group generated by the set $S$ is
$$
F(S) = \coprod_{\alpha \in S} \ZZ = \ZZ * \ZZ * \cdots
$$
where the coproduct is taken in the category of groups
$\mathbf{Grp}$, and hence it is the free product $*$.&lt;/p&gt;

&lt;h2 id=&#34;posets&#34;&gt;Posets&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;poset&lt;/em&gt; (Partially Ordered Set) is a category $\mathbf{P}$ in which
hom-sets have either 0 or 1 element,
and such that if there exist morphisms
$A\to B$ and $B\to A$, then $A=B$.&lt;/p&gt;

&lt;p&gt;So, if $A$ and $B$ are objects  one can define
[
A \leq B \iff \mathbf{P}(A,B) = \hom_{\mathbf{P}}(A,B) \neq \emptyset
]&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(3)&lt;/dt&gt;
&lt;dd&gt;The relation $A \leq B$ in $\mathbf{P}$ is
reflexive, antisymmetric and transitive.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;Proof:&lt;/em&gt;
Since $1_A \in \hom(A,A)$, the inequality $A\leq A$ holds.
If $A\leq B$ and $B\leq A$, then there are morphisms
$A\to B$ and $B \to A$,
and by assumpion $A=B$.
Transitivity follows from the existence of composition
of morphisms in any category.
&lt;em&gt;(/Proof)&lt;/em&gt;&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(4)&lt;/dt&gt;
&lt;dd&gt;The coproduct in $\mathbf{P}$
of a family $X_ \alpha$ of objects
is (if it exists) the supremum $\sup_ {s \in S} (X_ s)$ in
$\mathbf{P}$;
the product in $\mathbf{P}$
of a family $X_ \alpha$ of objects
is (if it exists) the infimum $\inf_ {s \in S} (X_ s)$.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;Proof:&lt;/em&gt;
Because of the $j_ \alpha \from X_ \alpha \to \coprod_ {s \in S} X_ s$,
 the coproduct
is an upper bound,
i.e. $X_ \alpha \leq \coprod_ {s \in S} X_ s$ for each $\alpha \in S$.
If $Z$ is any other upper bound, i.e. an object such that
for each $\alpha \in S$ the inequality $X_ \alpha \leq  Z$ holds,
then there exists $h \from \coprod_ {s \in S} X_ s \to Z$,
and hence
$\coprod_ {s \in S} X_ s \leq Z$, i.e. the coproduct is the
minimum of the upper bounds.&lt;/p&gt;

&lt;p&gt;Reversing arrows in $\mathbf{P}$ one obtains the result for the
product.
&lt;em&gt;(/Proof)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;$\newcommand{\bD}{\mathbf{D}}$ $\newcommand{\bC}{\mathbf{C}}$
$\newcommand{\bP}{\mathbf{P}}$&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;
Consider the poset $\bP$ of all subsets of a set $S$,
with $A\leq B$ if and only if $A\subseteq B \subseteq S$.
Then the coproduct and the product are the union and intersection
of the sets,
respectively:
$$
\coprod_ {\alpha} X_ \alpha = \bigcup_ \alpha X_ \alpha
$$
$$
\prod_ {\alpha} X_ \alpha = \bigcap_ \alpha X_ \alpha
$$&lt;/p&gt;

&lt;h2 id=&#34;coproducts-for-the-working-mathematician&#34;&gt;Coproducts for the Working Mathematician&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://link.springer.com/book/10.1007/978-1-4757-4721-8/page/1&#34; target=&#34;_blank&#34;&gt;Categories for the Working Mathematician&lt;/a&gt; is the go-to reference for anything categorical.
Let $\bC, \bD$ be  categories, and $F\from \bC \to \bD$ a functor.
The &lt;strong&gt;comma category&lt;/strong&gt; $X \downarrow F$ of objects $F$-under $X$,
for $X$ object in $\bD$,
has as objects the pairs $(f,Y)$ with $Y\in \bC$ and
$f\from X \to F(Y)$,
and as morphisms (arrows) $h \from (f,Y) \to (f&#39;,Y&#39;)$
all morhpisms $h\from Y \to Y&#39;$ su h that $f&#39;=F(h) f$
as in the following diagram.
&lt;center&gt;
&lt;img src=&#34;http://blog.dlfer.xyz/img/comma1.svg&#34; alt=&#34;Comma category diagram&#34; /&gt;
&lt;/center&gt;
Given $X\in \bD$ and $F\from \bC \to \bD$,
the comma category $X \downarrow F$ is uniquely defined.
If $X\downarrow F$ has an &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Initial_and_terminal_objects&#34; target=&#34;_blank&#34;&gt;initial object&lt;/a&gt;&lt;/strong&gt;,
then this is termed the &lt;strong&gt;universal arrow&lt;/strong&gt; from $X$ to $F$.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(5)&lt;/dt&gt;
&lt;dd&gt;The coproduct of two objects $X_ 1,X_ 2$ in $\bC$
is the initial object of the comma category
$(X_ 1,X_ 2) \downarrow \Delta$,
where $\Delta\from \bC \to \bC\times \bC$ is the diagonal functor.
Hence it is the universal arrow from $(X_1,X_2)$ to $\Delta$.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;Proof:&lt;/em&gt;
Consider the diagonal functor
$F=\Delta \from \bC \to \bD = \bC \times \bC $ (which sends
$Y$ to $(Y,Y)$ for each object $Y$ of the category $\bC$,
and morphisms accordingly).
Given an element $X=(X_ 1,X_ 2) \in \bD = \bC\times \bC$,
the initial object (if it exists) of the comma category
$(X_ 1,X_ 2) \downarrow \Delta$ is exactly the coproduct
$X_ 1 \coprod X_ 2$ in $\bC$.
In fact, an initial object is an object
$(j,A) \in (X_ 1,X_ 2) \downarrow \Delta$
such that for each object
$(h,Z) \in  (X_ 1,X_ 2) \downarrow \Delta$
there exists a unique morphism
$(j,A) \to (h,Z)$.
In other words,
an initial object is a pair $(j,A)$ with $A\in \bC$
and $j \from (X_ 1, X_ 2) \to (A,A)$ such that
for each
$(h,Z)$, with $h\from (X_ 1, X_ 2) \to (Z,Z)$ there exists a unique
morphism $f \from (j,A) \to (h,Z)$,
i.e. a unique morphism
$f \from A \to Z$
such that the composition
$ \Delta(f) j\from (X_ 1,X_ 2) \to (A,A) \to (Z,Z)$
is equal to $h$.
&lt;em&gt;(/Proof)&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>A counter-example for the exponentiation / adjoint of a function</title>
          <link>http://blog.dlfer.xyz/post/counterexample-to-adjoint/</link>
          <pubDate>Wed, 05 Oct 2016 14:24:49 CEST</pubDate>
          <author></author>
          <guid>http://blog.dlfer.xyz/post/counterexample-to-adjoint/</guid>
          <description>

&lt;h2 id=&#34;the-problem&#34;&gt;The problem:&lt;/h2&gt;

&lt;p&gt;Let $X$, $Y$, and $Z$ be topological spaces. Let $Y^X$ denote the space
of all &lt;em&gt;continuous&lt;/em&gt; functions $X\to Y$, with the compact-open topology
generated by the
elements of the sub-basis $W_{K,U} = \{\varphi \in Y^X : \varphi K \subset U\}$,
where $K$ ranges over all compact subsets of $X$ and $U$
ranges over over all open subsets of $Y$.
Finite intersections of $W_{K,U}$ are a basis for the C.O. topology of $Y^X$.&lt;/p&gt;

&lt;p&gt;For each function $f\from  Z \times X  \to Y$ there is a function
$\hat f \from Z \to Y^X$
(the &lt;em&gt;adjoint&lt;/em&gt; of $f$)
defined as
$$
\hat f(z)(x) = f(z,x)
$$
for each $z \in X$ and each $x\in X$.
Conversely, for any function $\hat g \from Z \to Y^X$ there is a function
 $f\from Z \times X \to Y$ defined as $f(z,x) = \hat f (z)(x)$.&lt;/p&gt;

&lt;p&gt;If $f$ is  continuous, then its adjoint
$\hat f$ is continuous. But in general, $\hat f$ can be continuous
while the corresponding $f$ is not.
It turns out that if $Y$ is locally-compact Hausdorff, then the following proposition holds.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;a name=&#34;propo&#34;&gt;&lt;/a&gt; (1)&lt;/dt&gt;
&lt;dd&gt;If $Y$ is locally compact Hausdorff, then $f\from Z\times X \to Y$ is continuous
if and only if its adjoint $\hat f \from Z \to Y^X$ is continuous.&lt;br /&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;We give here a counter-example to proposition &lt;a href=&#34;#propo&#34;&gt;(1)&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-rationals-qq&#34;&gt;The  rationals $\QQ$:&lt;/h2&gt;

&lt;p&gt;Let $\QQ$ be the space rationals, with the standard euclidean metric topology. Then
the following proposition holds&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;a name=&#34;propo*&#34;&gt;&lt;/a&gt;(*)&lt;/dt&gt;
&lt;dd&gt;Let $K\subset \QQ$ be a compact subset, and $A\subset \QQ$ an open subset.
Then, there exists an open subset $V\subset \QQ$ such that
$K\subset V$ and there exists an element $a\in A$ such that $a\not\in V$.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;Proof&lt;/em&gt;:
First, note that $A\not\subset K$. If on the contrary $A\subset K$, then
there would be a sequence in $A$ converging to an irrational, and hence
a sequence in $K$ without converging subsequences in $K$.
So $A\not\subset K$ and
hence there exists $a \in A$ such that $a\not\in K$.
But then, it is easy to define an open subset $V$ containing $K$ but
not containing $a$. &lt;em&gt;(/Proof)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-sierpinski-space-mathbf-2&#34;&gt;The Sierpinski Space $\mathbf{2}$:&lt;/h2&gt;

&lt;p&gt;Let $\mathbf{2}$ be the Sierpinski space.
That is, $\mathbf{2} = \{0,1\}$ with topology given by its (open) subsets $\{ \emptyset, \{1\}, \{0,1\} \}$.
The elements of
$\textbf{2}^\QQ$ are characteristic functions of the open
subsets of $\QQ$: a function $\varphi \from \QQ \to \textbf{2}$
is continuous if and only if $\varphi^{-1}(\{1\})$ is
open in $\QQ$, and hence if and only if $\varphi=\chi_A$ with
$A$ open in $\QQ$.&lt;/p&gt;

&lt;p&gt;The compact-open topology on $\textbf{2}^\QQ$ is generated by
the $W_{K,\{1\}}$, where
$K$ ranges over all the compact subsets of $\QQ$,
since the only non-trivial open subset of $\mathbf{2}$
is $\{1\}$. Being the union of a finite number of compact subsets
of $\QQ$ a compact subset of $\QQ$,
the set of $W_{K,\{1\}}$ is a basis (not just a sub-basis)
for the C.O. topology of $\mathbf{2}^\QQ$.
Also,
[
\varphi \in W_{K,\{1\}} \iff
\varphi^{-1}(1) \text{is an open subset containing $K$},
]
hence the elements of $W_{K,\{1\}}$ are
all the characteristic functions of those open subsets of
$\QQ$ which contain $K$.&lt;/p&gt;

&lt;h2 id=&#34;the-example&#34;&gt;The example:&lt;/h2&gt;

&lt;p&gt;Let $X=\QQ$, $Y=\mathbf{2}$, and $Z=\mathbf{2}^\QQ$.
Then adjoint of the evaluation function
[
\epsilon \from \mathbf{2}^\QQ \times \QQ \to \mathbf{2}
]
(defined as $\epsilon(\varphi,q ) = \varphi(q)$ for each $q\in \QQ$
and each $\varphi \from \QQ \to \textbf{2}$)
is the identity map
[
\hat \epsilon = 1 \from \mathbf{2}^\QQ \to \mathbf{2}^\QQ,
]
since by definition $\hat \epsilon( \varphi ) (q) = \epsilon(\varphi,q) = \varphi(q)$
for each $q$.
Therefore&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;a name=&#34;propo2&#34;&gt;&lt;/a&gt;(2)&lt;/dt&gt;
&lt;dd&gt;The adjoint function $\hat \epsilon \from Z \to Y^X$ is continuous.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Now, since the only non-trivial open subset of $\mathbf{2}$ is $\{1\}$,&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;a name=&#34;propo3&#34;&gt;&lt;/a&gt;(3)&lt;/dt&gt;
&lt;dd&gt;The evaluation function $\epsilon \from \mathbf{2}^\QQ \times \QQ \to \mathbf{2}$
is continuous if and only if the subset
[
\{ (\varphi,q) \in \mathbf{2}^\QQ \times \QQ : \varphi(q) = 1 \}
]
is open on $\mathbf{2}^\QQ \times \QQ$.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Consider the element $\xi =  (\chi_\QQ,0) \in \mathbf{2}^\QQ \times \QQ$.
Since $\chi_\QQ(0) = 1$, $\xi \in \epsilon^{-1}( 1 ) $.&lt;/p&gt;

&lt;p&gt;Let $A\subset \QQ$ be any arbitrary open subset such that $0 \in A$;
let $K$ be an arbitrary compact subset of $\QQ$ (for which
$\chi_\QQ \in W_{K,\{1\}} \iff \chi_\QQ K = 1$,
and hence $\chi_\QQ \in W_{K,\{1\}}$).
Then
[
\xi \in W_{K,\{1\}} \times A~.
]
Now,
$ W_{K,\{1\}} \times A \subset \epsilon^{-1}(1) $
if and only if for &lt;strong&gt;each&lt;/strong&gt; open subset $V$ of $\QQ$ such that
$K\subset V$ and for &lt;strong&gt;each&lt;/strong&gt; $a \in A$ it happens that
[
\epsilon(\chi_V(a)) = \chi_V ( a ) = 1,
]
that is $a \in V$.
Hence, it is not true that
$ W_{K,\{1\}} \times A \subset \epsilon^{-1}(1) $
if and only if
there exists
an open subset $V$ of $\QQ$ such that
$K\subset V$ and an element $a \in A$ such that
$a \not\in V$.
By proposition &lt;a href=&#34;#propo*&#34;&gt;(*)&lt;/a&gt;, the conclusion follows.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;(E)&lt;/dt&gt;
&lt;dd&gt;The evaluation function $\epsilon$ is not continuous, while its adjoint $\hat\epsilon$ is continuous.&lt;/dd&gt;
&lt;/dl&gt;
</description>
        </item>
      
    

  </channel>
</rss>
